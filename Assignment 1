A]
1.Implement Movie recommendation system.


1.Create pairs of movies rated by same user.


1.Create correlation table


B]
1. Create table "emp_staging" and load data from emp.csv in it.
CREATE TABLE emp_staging(empno INT,ename STRING,job STRING,mgr INT,hire DATE,sal DOUBLE,comm
DOUBLE,deptno INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE;

load data local inpath '/home/sunbeam/Class_Data(Assign + Code + Notes)/BigData/data/emp.csv' into table emp_staging;


2. Create table "dept_staging" and load data from dept.csv in it.
CREATE TABLE dept_staging(deptno INT, dname VARCHAR(40), loc STRING) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE;

load data local inpath '/home/sunbeam/Class_Data(Assign + Code + Notes)/BigData/data/dept.csv' into table dept_staging;


3. Display dept name and number of emps in each dept.
select d.dname,count(e.empno)noOfemp from dept_staging d inner join emp_staging e on d.deptno=e.deptno group by d.dname;

+-------------+----------+
|   d.dname   | noofemp  |
+-------------+----------+
| ACCOUNTING  | 3        |
| RESEARCH    | 5        |
| SALES       | 6        |
+-------------+----------+



4. Display emp name and his dept name.
select e.ename,d.dname from emp_staging e inner join dept_staging d on e.deptno=d.deptno;

+----------+-------------+
| e.ename  |   d.dname   |
+----------+-------------+
| SMITH    | RESEARCH    |
| ALLEN    | SALES       |
| WARD     | SALES       |
| JONES    | RESEARCH    |
| MARTIN   | SALES       |
| BLAKE    | SALES       |
| CLARK    | ACCOUNTING  |
| SCOTT    | RESEARCH    |
| KING     | ACCOUNTING  |
| TURNER   | SALES       |
| ADAMS    | RESEARCH    |
| JAMES    | SALES       |
| FORD     | RESEARCH    |
| MILLER   | ACCOUNTING  |
+----------+-------------+



5. Display all emps (name, job, deptno) with their manager (name, job, deptno), who are not in their 
department.
select e.ename,e.job,e.deptno,em.ename,em.job,em.deptno from emp_staging e inner join emp_staging em on e.empno=em.mgr where e.deptno <> em.deptno;
+----------+------------+-----------+-----------+----------+------------+
| e.ename  |   e.job    | e.deptno  | em.ename  |  em.job  | em.deptno  |
+----------+------------+-----------+-----------+----------+------------+
| KING     | PRESIDENT  | 10        | JONES     | MANAGER  | 20         |
| KING     | PRESIDENT  | 10        | BLAKE     | MANAGER  | 30         |
+----------+------------+-----------+-----------+----------+------------+

                                OR

select e.ename,e.job,e.deptno,em.ename,em.job,em.deptno from emp_staging e inner join emp_staging em on e.mgr=em.empno where e.deptno <> em.deptno;
+----------+----------+-----------+-----------+------------+------------+
| e.ename  |  e.job   | e.deptno  | em.ename  |   em.job   | em.deptno  |
+----------+----------+-----------+-----------+------------+------------+
| JONES    | MANAGER  | 20        | KING      | PRESIDENT  | 10         |
| BLAKE    | MANAGER  | 30        | KING      | PRESIDENT  | 10         |
+----------+----------+-----------+-----------+------------+------------+



6. Display all manager names with list of all dept names (where they can work).
select e.mgr,d.dname from emp_staging e inner join dept_staging d on e.deptno=d.deptno;

+--------+-------------+
| e.mgr  |   d.dname   |
+--------+-------------+
| 7902   | RESEARCH    |
| 7698   | SALES       |
| 7698   | SALES       |
| 7839   | RESEARCH    |
| 7698   | SALES       |
| 7839   | SALES       |
| 7839   | ACCOUNTING  |
| 7566   | RESEARCH    |
| NULL   | ACCOUNTING  |
| 7698   | SALES       |
| 7788   | RESEARCH    |
| 7698   | SALES       |
| 7566   | RESEARCH    |
| 7782   | ACCOUNTING  |
+--------+-------------+


7. Display job-wise total salary along with total salary of all employees.
select job,sum(sal) total_sal from emp_staging group by rollup(job);

+------------+----------------+
|  _u1.job   | _u1.total_sal  |
+------------+----------------+
| NULL       | 29025.0        |
| ANALYST    | 6000.0         |
| CLERK      | 4150.0         |
| MANAGER    | 8275.0         |
| PRESIDENT  | 5000.0         |
| SALESMAN   | 5600.0         |
| depts      | 29025.0        |
+------------+----------------+

                      ALSO USING COALESCE

select coalesce(job,'All_depts'),sum(sal) total_sal from emp_staging group by rollup(job);

+------------+------------+
|    _c0     | total_sal  |
+------------+------------+
| All_depts  | 29025.0    |
| ANALYST    | 6000.0     |
| CLERK      | 4150.0     |
| MANAGER    | 8275.0     |
| PRESIDENT  | 5000.0     |
| SALESMAN   | 5600.0     |
+------------+------------+



8. Display dept-wise total salary along with total salary of all employees.
select deptno,sum(sal) total_sal from emp_staging group by rollup(deptno);

+---------+------------+
| deptno  | total_sal  |
+---------+------------+
| NULL    | 29025.0    |
| 10      | 8750.0     |
| 20      | 10875.0    |
| 30      | 9400.0     |
+---------+------------+



9. Display per dept job-wise total salary along with total salary of all employees.
10. Display number of employees recruited per year in descending order of employee count.
select year(hire)recruited_year,count(empno) emp_count from emp_staging group by year(hire) order by emp_count desc;

+-----------------+------------+
| recruited_year  | emp_count  |
+-----------------+------------+
| 1981            | 10         |
| 1982            | 2          |
| 1983            | 1          |
| 1980            | 1          |
+-----------------+------------+




11. Display unique job roles who gets commission.
select distinct job,comm from emp_staging where comm is not null;

+-----------+---------+
|    job    |  comm   |
+-----------+---------+
| SALESMAN  | 0.0     |
| SALESMAN  | 300.0   |
| SALESMAN  | 500.0   |
| SALESMAN  | 1400.0  |
+-----------+---------+

                         USING JOIN

select distinct e.job, e.comm from emp_staging e inner join emp_staging em on e.deptno=em.deptno where e.comm is not null;

+-----------+---------+
|   e.job   | e.comm  |
+-----------+---------+
| SALESMAN  | 0.0     |
| SALESMAN  | 300.0   |
| SALESMAN  | 500.0   |
| SALESMAN  | 1400.0  |
+-----------+---------+                         
                         

12. Display dept name in which there is no employee (using sub-query).
13. Display emp-name, dept-name, salary, total salary of that dept (using sub-query).
14. Display all managers and presidents along with number of (immediate) subbordinates.

C]
1. Find emp with max sal of each dept.
select d.dname,max(e.sal)max_sal from emp_staging e inner join dept_staging d on e.deptno=d.deptno group by d.dname;

+-------------+----------+
|   d.dname   | max_sal  |
+-------------+----------+
| ACCOUNTING  | 5000.0   |
| RESEARCH    | 3000.0   |
| SALES       | 2850.0   |
+-------------+----------+





2. Find avg of deptwise total sal.
select avg(e.sal) avg_sal,d.dname from emp_staging e inner join dept_staging d on e.deptno=d.deptno group by d.dname;

+---------------------+-------------+
|       avg_sal       |   d.dname   |
+---------------------+-------------+
| 2916.6666666666665  | ACCOUNTING  |
| 2175.0              | RESEARCH    |
| 1566.6666666666667  | SALES       |
+---------------------+-------------+



3. Compare (show side-by-side) sal of each emp with avg sal in his dept and avg sal for his job.
select e.sal,d.avg_sal_dept,j.avg_sal_job from emp_staging e inner join (select deptno,avg(sal)avg_sal_dept from emp_staging group by deptno)d on e.deptno=d.deptno inner join (select job, avg(sal)avg_sal_job from emp_staging group by job)j on e.job=j.job;

+---------+---------------------+---------------------+
|  e.sal  |   d.avg_sal_dept    |    j.avg_sal_job    |
+---------+---------------------+---------------------+
| 2450.0  | 2916.6666666666665  | 2758.3333333333335  |
| 5000.0  | 2916.6666666666665  | 5000.0              |
| 1300.0  | 2916.6666666666665  | 1255.5555555555557  |
| 800.0   | 2175.0              | 1255.5555555555557  |
| 2975.0  | 2175.0              | 2758.3333333333335  |
| 3000.0  | 2175.0              | 3000.0              |
| 1100.0  | 2175.0              | 1255.5555555555557  |
| 3000.0  | 2175.0              | 3000.0              |
| 1600.0  | 1566.6666666666667  | 1400.0              |
| 1250.0  | 1566.6666666666667  | 1400.0              |
| 1250.0  | 1566.6666666666667  | 1400.0              |
| 2850.0  | 1566.6666666666667  | 2758.3333333333335  |
| 1500.0  | 1566.6666666666667  | 1400.0              |
| 950.0   | 1566.6666666666667  | 1255.5555555555557  |
| 3000.0  | 3000.0              | 1255.5555555555557  |
+---------+---------------------+---------------------+






4. Divide emps by category -- Poor < 1500, 1500 <= Middle <= 2500, Rich > 2500. Hint: CASE ... WHEN. Count emps for each category.





5. Display emps with category (as above), empno, ename, sal and dname.
6. Count number of emps in each dept for each category (as above).

D]
1. Create table "books_staging" and load books.csv in it.
2. Create table "books_orc" as transactional table.
3. Create a materialized view for summary -- Subjectwise average book price.
4. Display a report that shows subject and average price in descending order -- on materialized view.
5. Create a new le newbooks.csv.
6. Upload the le newbooks.csv into books_staging.
7. Insert "new" records from books_staging into books_orc.
8. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new books visible in report?
9. Rebuild the materialized view.
10. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new books visible in report?
11. Increase price of all Java books by 10% in books_orc.
12. Rebuild the materialized view.
13. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new price changes visible in report?
14. Delete all Java books.
15. Rebuild the materialized view.
16. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new price changes visible in report?



E]

















